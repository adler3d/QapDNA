#!/usr/bin/env node

const { spawn } = require('child_process');
const readline = require('readline');

// –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞
const startTime = process.hrtime.bigint();

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
function formatTimestamp() {
    const now = process.hrtime.bigint();
    const diffNs = now - startTime;
    const diffMs = Number(diffNs) / 1_000_000; // –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã ‚Üí –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    return diffMs.toFixed(2).padStart(8, ' '); // –Ω–∞–ø—Ä–∏–º–µ—Ä: "  123.45"
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function runWithLiveOutput(cmd, args, prefix) {
    const child = spawn(cmd, args, {
        stdio: ['ignore', 'pipe', 'pipe'], // stdin=ignore, stdout/stderr=pipes
        windowsHide: true,
    });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º stderr –≤ stdout
    child.stderr.on('data', (data) => {
        child.stdout.write(data);
    });

    // –ß–∏—Ç–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    const rl = readline.createInterface({
        input: child.stdout,
        crlfDelay: Infinity
    });

    rl.on('line', (line) => {
        const ts = formatTimestamp();
        console.log(`${ts} ${prefix}${line}`);
    });

    rl.on('close', () => {
        child.stdout.destroy();
    });

    return child;
}

// ----------------------------
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ----------------------------
console.log("üöÄ Starting QapLR.exe with live output...");

if(0){
  server = runWithLiveOutput(
      './QapLR.exe',
      ['t_splinter', '16', '10', '0', '-p', '31500'],
      '[QapLR] '
  );
}else server={on:()=>0};

// –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç
setTimeout(() => {
    // ----------------------------
    // –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    // ----------------------------
    const clients = [];
    const ports = [];//[31500, 31501, 31502, 31503];
    for(let i=0;i<16;i++)ports.push(31500+i);
    
    ports.forEach((port, i) => {
        console.log(`üîå Starting client ${i + 1} for port ${port}...`);
        const client = runWithLiveOutput(
            './socket_adapter.exe',
            ['-e', `127.0.0.1:${port}`, './gpt5.exe'],
            `[Client-${i}] `
        );
        clients.push(client);
    });

    console.log("‚úÖ All processes started.");

    // ----------------------------
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    // ----------------------------
    server.on('close', (code) => {
        console.log(`\n‚úÖ QapLR exited with code ${code}`);
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients.forEach(c => {
            if (!c.killed) c.kill();
        });
        process.exit(code === 0 ? 0 : 1);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
    process.on('SIGINT', () => {
        console.log('\nüõë Interrupted. Terminating...');
        server.kill();
        clients.forEach(c => {
            if (!c.killed) c.kill();
        });
        process.exit(130);
    });

}, 100); // 100 –º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ (–∫–∞–∫ time.sleep(0.1))